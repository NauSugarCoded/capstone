{"version":3,"sources":["../../src/pages/create_study/create_study.module.ts","../../src/pages/create_study/create_study.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { CreateStudyPage } from './create_study';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CreateStudyPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(CreateStudyPage),\r\n  ],\r\n})\r\nexport class CreateStudyPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/create_study/create_study.module.ts","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, FormsModule } from '@angular/forms';\r\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\r\nimport { DatabaseProvider } from '../../providers/database/database';\r\n\r\n\r\n@IonicPage({\r\n\tname: \"create_study\"\r\n})\r\n@Component({\r\n  selector: 'page-create-study',\r\n  templateUrl: 'create_study.html',\r\n})\r\nexport class CreateStudyPage {\r\n\r\n\r\n\r\n   /**\r\n    * @name form\r\n    * @type {object}\r\n    * @public\r\n    * @description     Defines an object for handling form validation\r\n    */\r\n   public form          : any;\r\n\r\n\r\n\r\n   /**\r\n    * @name records\r\n    * @type {object}\r\n    * @public\r\n    * @description     Defines an object for returning documents from Cloud Firestore database\r\n    */\r\n   public records       : any;\r\n\r\n\r\n\r\n   /**\r\n    * @name full_name\r\n    * @type {string}\r\n    * @public\r\n    * @description     Model for city form field\r\n    */\r\n   public full_name          : string          = '';\r\n\r\n\r\n\r\n   /**\r\n    * @name short_name\r\n    * @type {string}\r\n    * @public\r\n    * @description     Model for population form field\r\n    */\r\n   public short_name    : string          = '';\r\n\r\n\r\n\r\n   /**\r\n    * @name abstract\r\n    * @type {string}\r\n    * @public\r\n    * @description     Model for established form field\r\n    */\r\n   public abstract \t: string          = '';\r\n\r\n   /**\r\n    * @name end_date\r\n    * @type {date}\r\n    * @public\r\n    * @description     Model for established form field\r\n    */\r\n   public end_date \t: date;\r\n\r\n\r\n\r\n   /**\r\n    * @name docID\r\n    * @type {string}\r\n    * @public\r\n    * @description     property that stores an edited document's ID\r\n    */\r\n   public docID         : string          = '';\r\n\r\n\r\n\r\n   /**\r\n    * @name isEditable\r\n    * @type {boolean}\r\n    * @public\r\n    * @description     property that stores value to signify whether\r\n                       we are editing an existing document or not\r\n    */\r\n   public isEditable    : boolean         = false;\r\n\r\n\r\n\r\n   /**\r\n    * @name title\r\n    * @type {string}\r\n    * @public\r\n    * @description     property that defines the template title value\r\n    */\r\n   public title \t\t: string\t\t   = 'Add a new Study';\r\n\r\n\r\n\r\n   /**\r\n    * @name _COLL\r\n    * @type {string}\r\n    * @private\r\n    * @description     property that stores the value for the database collection\r\n    */\r\n   private _COLL \t\t: string \t\t\t= \"Studies\";\r\n\r\n\r\n   constructor(public navCtrl        : NavController,\r\n               public params         : NavParams,\r\n               private _FB \t         : FormBuilder,\r\n               private _DB           : DatabaseProvider,\r\n               private _ALERT        : AlertController)\r\n   {\r\n\r\n      // Use Formbuilder API to create a FormGroup object\r\n      // that will be used to programmatically control the\r\n      // form / form fields in the component template\r\n      this.form \t\t= _FB.group({\r\n         'full_name' \t\t        : ['', Validators.required],\r\n         'short_name' \t        : ['', Validators.required],\r\n         'abstract'\t            : ['', Validators.required],\r\n         'end_date'\t            : ['', Validators.required]\r\n      });\r\n\r\n\r\n      // If we have navigation parameters then we need to\r\n      // parse these as we know these will be used for\r\n      // editing an existing record\r\n      if(params.get('isEdited'))\r\n      {\r\n          let record \t\t        = params.get('record');\r\n\r\n          this.full_name\t            = record.location.full_name;\r\n          this.short_name   \t  = record.location.short_name;\r\n          this.abstract      = record.location.abstract;\r\n          this.end_date      = record.location.end_date;\r\n          this.docID            = record.location.id;\r\n          this.isEditable       = true;\r\n          this.title            = 'Update this document';\r\n      }\r\n   }\r\n\r\n\r\n\r\n   /**\r\n    * Saves form data as newly added/edited record within Firebase Realtime\r\n    * database and handles uploading of media asset to Firebase Storage\r\n    *\r\n    * @public\r\n    * @method saveDocument\r\n    * @param  val          {any}              Form data\r\n    * @return {none}\r\n    */\r\n   saveDocument(val : any) : void\r\n   {\r\n      let full_name\t      : string\t\t= this.form.controls[\"full_name\"].value,\r\n\t \t      short_name        : string \t\t= this.form.controls[\"short_name\"].value,\r\n          abstract       : string\t\t= this.form.controls[\"abstract\"].value,\r\n          end_date       : string\t\t= this.form.controls[\"end_date\"].value;\r\n\r\n      // If we are editing an existing record then handle this scenario\r\n      if(this.isEditable)\r\n      {\r\n\r\n         // Call the DatabaseProvider service and pass/format the data for use\r\n         // with the updateDocument method\r\n         this._DB.updateDocument(this._COLL,\r\n                               this.docID,\r\n                               {\r\n\t                               full_name    : full_name,\r\n\t                               short_name    : short_name,\r\n\t                               abstract   : abstract,\r\n                                 end_date   : end_date\r\n\t                           })\r\n         .then((data) =>\r\n         {\r\n            this.clearForm();\r\n            this.displayAlert('Success', 'The study ' +  name + ' was successfully updated');\r\n         })\r\n         .catch((error) =>\r\n         {\r\n            this.displayAlert('Updating study failed', error.message);\r\n         });\r\n      }\r\n\r\n      // Otherwise we are adding a new record\r\n      else\r\n      {\r\n\r\n         // Call the DatabaseProvider service and pass/format the data for use\r\n         // with the addDocument method\r\n         this._DB.addDocument(this._COLL,\r\n                            {\r\n\t                           full_name    : full_name,\r\n\t                           short_name    : short_name,\r\n\t                           abstract   : abstract,\r\n                             end_date   : end_date\r\n\t                        })\r\n         .then((data) =>\r\n         {\r\n            this.clearForm();\r\n            this.displayAlert('Record added', 'The study ' +  name + ' was successfully added');\r\n         })\r\n         .catch((error) =>\r\n         {\r\n            this.displayAlert('Adding study failed', error.message);\r\n         });\r\n      }\r\n   }\r\n\r\n\r\n\r\n   /**\r\n    * Provide feedback to user after an operation has succeeded/failed\r\n    *\r\n    * @public\r\n    * @method displayAlert\r\n    * @param  title          {String}           Heading for alert message\r\n    * @param  message        {String}           Content for alert message\r\n    * @return {none}\r\n    */\r\n   displayAlert(title      : string,\r\n                message    : string) : void\r\n   {\r\n      let alert : any     = this._ALERT.create({\r\n         title      : title,\r\n         subTitle   : message,\r\n         buttons    : ['Got it!']\r\n      });\r\n      alert.present();\r\n   }\r\n\r\n\r\n\r\n   /**\r\n    * Clear all form data\r\n    *\r\n    * @public\r\n    * @method clearForm\r\n    * @return {none}\r\n    */\r\n   clearForm() : void\r\n   {\r\n      this.full_name  \t\t\t\t\t= '';\r\n      this.short_name\t\t\t\t= '';\r\n      this.abstract \t\t\t\t= '';\r\n      this.end_date         = '';\r\n   }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/create_study/create_study.ts"],"sourceRoot":""}