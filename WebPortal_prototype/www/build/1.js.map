{"version":3,"sources":["../../src/pages/select_module/select_module.module.ts","../../src/pages/select_module/select_module.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SelectModulePage } from './select_module';\n\n@NgModule({\n  declarations: [\n    SelectModulePage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SelectModulePage),\n  ],\n})\nexport class SelectModulePageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/select_module/select_module.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators,FormsModule } from '@angular/forms';\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { DatabaseProvider } from '../../providers/database/database';\n/**\n * Generated class for the SelectModulePage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage({\n name: \"select_module\"\n})\n@Component({\n  selector: 'page-select-module',\n  templateUrl: 'select_module.html',\n})\nexport class SelectModulePage {\n\n  /**\n   * @name form\n   * @type {object}\n   * @public\n   * @description     Defines an object for handling form validation\n   */\n  public form          : any;\n\n\n\n  /**\n   * @name records\n   * @type {object}\n   * @public\n   * @description     Defines an object for returning documents from Cloud Firestore database\n   */\n  public records       : any;\n\n\n\n  /**\n   * @name name\n   * @type {string}\n   * @public\n   * @description     Model for city form field\n   */\n  public name          : string          = '';\n\n\n\n  /**\n   * @name owner\n   * @type {string}\n   * @public\n   * @description     Model for population form field\n   */\n  public owner    : string          = '';\n\n\n\n  /**\n   * @name tyoe\n   * @type {string}\n   * @public\n   * @description     Model for established form field\n   */\n  public type \t: string          = '';\n\n  /**\n   * @name recurrence\n   * @type {string}\n   * @public\n   * @description     Model for established form field\n   */\n  public recurrence \t: string          = '';\n\n  /**\n   * @name start_time\n   * @type {time}\n   * @public\n   * @description     Model for established form field\n   */\n  public start_time \t: any;\n\n  /**\n   * @name start_date\n   * @type {date}\n   * @public\n   * @description     Model for established form field\n   */\n  public start_date \t: string             = '';\n\n  /**\n   * @name end_date\n   * @type {date}\n   * @public\n   * @description     Model for established form field\n   */\n  public end_date \t: string             = '';\n\n\n\n  /**\n   * @name docID\n   * @type {string}\n   * @public\n   * @description     property that stores an edited document's ID\n   */\n  public docID         : string          = '';\n\n\n\n  /**\n   * @name isEditable\n   * @type {boolean}\n   * @public\n   * @description     property that stores value to signify whether\n                      we are editing an existing document or not\n   */\n  public isEditable    : boolean         = false;\n\n\n\n  /**\n   * @name title\n   * @type {string}\n   * @public\n   * @description     property that defines the template title value\n   */\n  public title \t\t: string\t\t   = 'Add a new question';\n\n\n\n  /**\n   * @name _COLL\n   * @type {string}\n   * @private\n   * @description     property that stores the value for the database collection\n   */\n  private _COLL \t\t: string \t\t\t= \"Modules\";\n  private module  : any;\n  private record : any;\n\n  /**\n   * @name quests\n   * @type {object}\n   * @private\n   * @description     property that stores the value for the database collection\n   */\n  private quests \t\t: any;\n\n  /**\n   * @name questions\n   * @type {object}\n   * @private\n   * @description     property that stores the value for the database collection\n   */\n  private questions \t\t: any;\n  private option1       : string;\n  private option2       : string;\n  private option3       : string;\n  private option4       : string;\n  private option5       : string;\n  private option6       : string;\n  private opts          : any;\n\n\n  constructor(public navCtrl        : NavController,\n              public params         : NavParams,\n              private _FB \t         : FormBuilder,\n              private _DB           : DatabaseProvider,\n              private _ALERT        : AlertController)\n  {\n\n     // Use Formbuilder API to create a FormGroup object\n     // that will be used to programmatically control the\n     // form / form fields in the component template\n     this.form \t\t= _FB.group({\n        'name' \t\t        : ['', Validators.required],\n        'type'\t        : ['', Validators.required],\n        'recurrence'\t\t\t: [''],\n        'start_time'\t\t\t:\t[''],\n        'start_date'\t\t\t: [''],\n        'end_date'\t\t\t\t: ['']\n\n     });\n\n\n     // If we have navigation parameters then we need to\n     // parse these as we know these will be used for\n     // editing an existing record\n     if(params.get('isEdited'))\n     {\n         let record \t\t        = params.get('record');\n\n         this.name\t            = record.location.name;\n         this.type   \t  = record.location.type;\n         this.recurrence = record.location.recurrence;\n         this.start_time = record.location.start_time;\n         this.start_date = record.location.start_date;\n         this.end_date = record.location.end_date;\n         this.owner      = record.location.owner;\n         this.docID            = record.location.id;\n         this.isEditable       = true;\n         this.title            = 'Update this document';\n\n         this.module = record.location;\n     }\n  }\n\n  ionViewDidEnter()\n  {\n    this.retrieveCollection();\n    if(this.docID != ''){\n      this.retrieveSubCollection();\n    }\n  }\n\n  retrieveCollection() : void\n  {\n     this._DB.getQuestions_Modules(\"Questions\")\n     .then((data) =>\n     {\n       this.quests = data;\n       console.log(this.quests);\n     })\n     .catch();\n\n  }\n\n  retrieveSubCollection() : void\n  {\n     this._DB.getModules_Questions(this._COLL, this.docID, \"Questions\")\n     .then((data) =>\n     {\n       this.questions = data;\n     })\n     .catch();\n  }\n\n\n  updateModule(val : any) : void\n  {\n     let name\t      : string\t\t= this.form.controls[\"name\"].value,\n         type       : string \t\t= this.form.controls[\"type\"].value,\n         recurrence\t: string\t\t= this.form.controls['recurrence'].value,\n         start_time\t: string\t\t= this.form.controls['start_time'].value,\n         start_date\t: string\t\t= this.form.controls['start_date'].value,\n         end_date\t\t: string\t\t= this.form.controls['end_date'].value\n\n\n     // If we are editing an existing record then handle this scenario\n     if(this.isEditable)\n     {\n\n        // Call the DatabaseProvider service and pass/format the data for use\n        // with the updateDocument method\n        this._DB.updateDocument(this._COLL,\n                              this.docID,\n                              {\n                                name    : name,\n                                type    : type,\n                                recurrence : recurrence,\n                                start_time\t: start_time,\n                                start_date\t: start_date,\n                                end_date\t\t: end_date\n                            })\n        .then((data) =>\n        {\n           this.displayAlert('Success', 'The module ' +  name + ' was successfully updated');\n        })\n        .catch((error) =>\n        {\n           this.displayAlert('Updating module failed', error.message);\n        });\n     }\n\n     // Otherwise we are adding a new record\n     else\n     {\n\n        // Call the DatabaseProvider service and pass/format the data for use\n        // with the addDocument method\n        this._DB.addDocument(this._COLL,\n                           {\n                            name    : name,\n                            type    : type,\n                            recurrence : recurrence,\n                            start_time\t: start_time,\n                            start_date : start_date,\n                            end_date\t\t: end_date\n                         })\n        .then((data) =>\n        {\n           this.displayAlert('Record added', 'The module ' +  name + ' was successfully added');\n        })\n        .catch((error) =>\n        {\n           this.displayAlert('Adding module failed', error.message);\n        });\n     }\n  }\n\n  deleteDocument() : void\n  {\n     this._DB.deleteDocument(this._COLL,\n                this.docID)\n     .then((data : any) =>\n     {\n        this.displayAlert('Success', 'The module ' + this.name + ' was successfully removed');\n     })\n     .catch((error : any) =>\n     {\n        this.displayAlert('Error', error.message);\n     });\n  }\n\n\n  saveQuestions(val : any, moduleID : any)\n  {\n    if(val.type == \"text\"){\n      this._DB.addModules_Questions(\"Modules\", this.docID, \"Questions\", {\n                                                            name    : val.name,\n                                                            id      : val.id,\n                                                            type    : val.type,\n                                                            qtext   : val.qtext,\n                                                            owner\t : val.owner,\n                                                            moduleID : moduleID\n                                                          })\n      .then((data : any) =>\n      {\n        this.displayAlert('Success', 'The question ' + val.name + ' was successfully added');\n      })\n      .catch((error : any) =>\n      {\n        this.displayAlert('Error', error.message);\n      });\n    }\n\n    else if(val.type == \"multi\"){\n      this.saveQuestionsHelper(val)\n      .then((opts : any) =>\n      {\n      console.log(this.opts);\n      this._DB.addModules_Questions(\"Modules\", this.docID, \"Questions\", {\n                                                            name    : val.name,\n                                                            id      : val.id,\n                                                            type    : val.type,\n                                                            qtext   : val.qtext,\n                                                            owner\t  : val.owner,\n                                                            option1 : opts[0],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option2 : opts[1],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option3 : opts[2],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option4 : opts[3],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option5 : opts[4],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option6 : opts[5],\n                                                            moduleID : moduleID\n                                                          })\n      .then((data : any) =>\n      {\n        this.displayAlert('Success', 'The question ' + val.name + ' was successfully added');\n      })\n      .catch((error : any) =>\n      {\n        this.displayAlert('Error', error.message);\n      });\n      })\n    }\n\n    else if(val.type == \"radio\"){\n      this.saveQuestionsHelper(val)\n      .then((opts : any) =>\n      {\n      this._DB.addModules_Questions(\"Modules\", this.docID, \"Questions\", {\n                                                            name    : val.name,\n                                                            type    : val.type,\n                                                            id      : val.id,\n                                                            qtext   : val.qtext,\n                                                            owner\t  : val.owner,\n                                                            option1 : opts[0],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option2 : opts[1],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option3 : opts[2],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option4 : opts[3],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option5 : opts[4],\n                           \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  option6 : opts[5],\n                                                            moduleID : moduleID\n                                                          })\n      .then((data : any) =>\n      {\n        this.displayAlert('Success', 'The question ' + val.name + ' was successfully added');\n      })\n      .catch((error : any) =>\n      {\n        this.displayAlert('Error', error.message);\n      });\n    })\n    }\n\n    else{\n      this._DB.addModules_Questions(\"Modules\", this.docID, \"Questions\", {\n                                                            name    : val.name,\n                                                            id      : val.id,\n                                                            type    : val.type,\n                                                            qtext   : val.qtext,\n                                                            owner\t  : val.owner,\n                                                            moduleID : moduleID\n                                                          })\n      .then((data : any) =>\n      {\n        this.displayAlert('Success', 'The question ' + val.name + ' was successfully added');\n      })\n      .catch((error : any) =>\n      {\n        this.displayAlert('Error', error.message);\n      });\n    }\n\n  }\n\n  saveQuestionsHelper(val : any) : any\n  {\n    let opts = [];\n    let i = 0;\n    for(i = 0; i < this.quests.length; i++){\n      if (this.quests[i] == val.name){\n        opts[0] = this.quests[i].option1;\n        opts[1] = this.quests[i].option2;\n        opts[2] = this.quests[i].option3;\n        opts[3] = this.quests[i].option4;\n        opts[4] = this.quests[i].option5;\n        opts[5] = this.quests[i].option6;\n      }\n    }\n    return opts;\n  }\n\n  updateDocument(object) : void\n  {\n     let params : any = {\n        collection   : this._COLL,\n        location     : object\n     };\n     this.navCtrl.push('branching', { record : params});\n  }\n\n\n  /**\n   * Provide feedback to user after an operation has succeeded/failed\n   *\n   * @public\n   * @method displayAlert\n   * @param  title          {String}           Heading for alert message\n   * @param  message        {String}           Content for alert message\n   * @return {none}\n   */\n  displayAlert(title      : string,\n               message    : string) : void\n  {\n     let alert : any     = this._ALERT.create({\n        title      : title,\n        subTitle   : message,\n        buttons    : ['Got it!']\n     });\n     alert.present();\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/select_module/select_module.ts"],"sourceRoot":""}