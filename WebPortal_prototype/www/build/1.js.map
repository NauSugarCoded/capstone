{"version":3,"sources":["../../src/pages/select_module/select_module.module.ts","../../src/pages/select_module/select_module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACG;AAUnD;IAAA;IAAqC,CAAC;IAAzB,sBAAsB;QARlC,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,wEAAgB;aACjB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,wEAAgB,CAAC;aAC3C;SACF,CAAC;OACW,sBAAsB,CAAG;IAAD,6BAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACZO;AACsC;AACN;AACL;AACrE;;;;;GAKG;AAOH;IA4FE,0BAAmB,OAA8B,EAC9B,MAA0B,EACzB,GAA2B,EAC3B,GAAgC,EAChC,MAA+B;QAJhC,YAAO,GAAP,OAAO,CAAuB;QAC9B,WAAM,GAAN,MAAM,CAAoB;QACzB,QAAG,GAAH,GAAG,CAAwB;QAC3B,QAAG,GAAH,GAAG,CAA6B;QAChC,WAAM,GAAN,MAAM,CAAyB;QA1EnD;;;;;WAKG;QACI,SAAI,GAA8B,EAAE,CAAC;QAI5C;;;;;WAKG;QACI,UAAK,GAAwB,EAAE,CAAC;QAIvC;;;;;WAKG;QACI,SAAI,GAAsB,EAAE,CAAC;QAIpC;;;;;WAKG;QACI,UAAK,GAA6B,EAAE,CAAC;QAI5C;;;;;;WAMG;QACI,eAAU,GAAwB,KAAK,CAAC;QAI/C;;;;;WAKG;QACI,UAAK,GAAkB,oBAAoB,CAAC;QAInD;;;;;WAKG;QACK,UAAK,GAAiB,SAAS,CAAC;QAUrC,mDAAmD;QACnD,oDAAoD;QACpD,+CAA+C;QAC/C,IAAI,CAAC,IAAI,GAAK,GAAG,CAAC,KAAK,CAAC;YACrB,MAAM,EAAa,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;YAC5C,OAAO,EAAY,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;YAC5C,MAAM,EAAW,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;SAC5C,CAAC,CAAC;QAGH,mDAAmD;QACnD,gDAAgD;QAChD,6BAA6B;QAC7B,EAAE,EAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAC1B,CAAC;YACG,IAAI,MAAM,GAAa,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE5C,IAAI,CAAC,IAAI,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAC3C,IAAI,CAAC,IAAI,GAAQ,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YACpC,IAAI,CAAC,KAAK,GAAQ,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YACtC,IAAI,CAAC,KAAK,GAAc,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,UAAU,GAAS,IAAI,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAc,sBAAsB,CAAC;QACnD,CAAC;IACJ,CAAC;IAID;;;;;;;;OAQG;IACH,uCAAY,GAAZ,UAAa,KAAmB,EACnB,OAAmB;QAE7B,IAAI,KAAK,GAAa,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACtC,KAAK,EAAQ,KAAK;YAClB,QAAQ,EAAK,OAAO;YACpB,OAAO,EAAM,CAAC,SAAS,CAAC;SAC1B,CAAC,CAAC;QACH,KAAK,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAjJU,gBAAgB;QAJ5B,wEAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;WACG;SAClC,CAAC;6EA6FiD;YACb,mEAAS;YACT,sFAAW;YACX,uEAAgB;YAChB,aAAe;OAhGxC,gBAAgB,CAoJ5B;IAAD,CAAC;AAAA;SApJY,gBAAgB,gB","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SelectModulePage } from './select_module';\n\n@NgModule({\n  declarations: [\n    SelectModulePage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SelectModulePage),\n  ],\n})\nexport class SelectModulePageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/select_module/select_module.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators,FormsModule } from '@angular/forms';\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { DatabaseProvider } from '../../providers/database/database';\n/**\n * Generated class for the SelectModulePage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage({\n name: \"select_module\"\n})\n@Component({\n  selector: 'page-select-module',\n  templateUrl: 'select_module.html',\n})\nexport class SelectModulePage {\n\n  /**\n   * @name form\n   * @type {object}\n   * @public\n   * @description     Defines an object for handling form validation\n   */\n  public form          : any;\n\n\n\n  /**\n   * @name records\n   * @type {object}\n   * @public\n   * @description     Defines an object for returning documents from Cloud Firestore database\n   */\n  public records       : any;\n\n\n\n  /**\n   * @name name\n   * @type {string}\n   * @public\n   * @description     Model for city form field\n   */\n  public name          : string          = '';\n\n\n\n  /**\n   * @name owner\n   * @type {string}\n   * @public\n   * @description     Model for population form field\n   */\n  public owner    : string          = '';\n\n\n\n  /**\n   * @name tyoe\n   * @type {string}\n   * @public\n   * @description     Model for established form field\n   */\n  public type \t: string          = '';\n\n\n\n  /**\n   * @name docID\n   * @type {string}\n   * @public\n   * @description     property that stores an edited document's ID\n   */\n  public docID         : string          = '';\n\n\n\n  /**\n   * @name isEditable\n   * @type {boolean}\n   * @public\n   * @description     property that stores value to signify whether\n                      we are editing an existing document or not\n   */\n  public isEditable    : boolean         = false;\n\n\n\n  /**\n   * @name title\n   * @type {string}\n   * @public\n   * @description     property that defines the template title value\n   */\n  public title \t\t: string\t\t   = 'Add a new question';\n\n\n\n  /**\n   * @name _COLL\n   * @type {string}\n   * @private\n   * @description     property that stores the value for the database collection\n   */\n  private _COLL \t\t: string \t\t\t= \"Modules\";\n\n\n  constructor(public navCtrl        : NavController,\n              public params         : NavParams,\n              private _FB \t         : FormBuilder,\n              private _DB           : DatabaseProvider,\n              private _ALERT        : AlertController)\n  {\n\n     // Use Formbuilder API to create a FormGroup object\n     // that will be used to programmatically control the\n     // form / form fields in the component template\n     this.form \t\t= _FB.group({\n        'name' \t\t        : ['', Validators.required],\n        'owner' \t        : ['', Validators.required],\n        'type'\t        : ['', Validators.required]\n     });\n\n\n     // If we have navigation parameters then we need to\n     // parse these as we know these will be used for\n     // editing an existing record\n     if(params.get('isEdited'))\n     {\n         let record \t\t        = params.get('record');\n\n         this.name\t            = record.module.name;\n         this.type   \t  = record.module.type;\n         this.owner      = record.module.owner;\n         this.docID            = record.module.id;\n         this.isEditable       = true;\n         this.title            = 'Update this document';\n     }\n  }\n\n\n\n  /**\n   * Provide feedback to user after an operation has succeeded/failed\n   *\n   * @public\n   * @method displayAlert\n   * @param  title          {String}           Heading for alert message\n   * @param  message        {String}           Content for alert message\n   * @return {none}\n   */\n  displayAlert(title      : string,\n               message    : string) : void\n  {\n     let alert : any     = this._ALERT.create({\n        title      : title,\n        subTitle   : message,\n        buttons    : ['Got it!']\n     });\n     alert.present();\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/select_module/select_module.ts"],"sourceRoot":""}