{"version":3,"sources":["../../src/pages/create_participant/create_participant.module.ts","../../src/pages/create_participant/create_participant.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { CreateParticipantPage } from './create_participant';\n\n@NgModule({\n  declarations: [\n    CreateParticipantPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(CreateParticipantPage),\n  ],\n})\nexport class CreateParticipantPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/create_participant/create_participant.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { DatabaseProvider } from '../../providers/database/database';\n\n\n@IonicPage({\n\tname: \"create_participant\"\n})\n@Component({\n  selector: 'page-create-participant',\n  templateUrl: 'create_participant.html',\n})\n\n\nexport class CreateParticipantPage {\n\n\n\n   /**\n    * @name form\n    * @type {object}\n    * @public\n    * @description     Defines an object for handling form validation\n    */\n   public form          : any;\n\n\n\n   /**\n    * @name records\n    * @type {object}\n    * @public\n    * @description     Defines an object for returning documents from Cloud Firestore database\n    */\n   public records       : any;\n\n\n\n   /**\n    * @name name\n    * @type {string}\n    * @public\n    * @description     Model for city form field\n    */\n   public name          : string          = '';\n\n\n   /**\n    * @name email\n    * @type {string}\n    * @public\n    * @description     Model for population form field\n    */\n   public email    : string          = '';\n\n\n   /**\n    * @name phone\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public phone \t: string          = '';\n\n   /**\n    * @name owner\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public owner \t: string          = '';\n\n   /**\n    * @name sleep_end\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public sleep_end \t: string          = '';\n\n   /**\n    * @name sleep_start\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public sleep_start \t: string          = '';\n\n   /**\n    * @name study\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public study \t: string          = '';\n\n\n   /**\n    * @name docID\n    * @type {string}\n    * @public\n    * @description     property that stores an edited document's ID\n    */\n   public docID         : string          = '';\n\n\n\n   /**\n    * @name isEditable\n    * @type {boolean}\n    * @public\n    * @description     property that stores value to signify whether\n                       we are editing an existing document or not\n    */\n   public isEditable    : boolean         = false;\n\n\n\n   /**\n    * @name title\n    * @type {string}\n    * @public\n    * @description     property that defines the template title value\n    */\n   public title \t\t: string\t\t   = 'Add a new participant';\n\n\n\n   /**\n    * @name _COLL\n    * @type {string}\n    * @private\n    * @description     property that stores the value for the database collection\n    */\n   private _COLL \t\t: string \t\t\t= \"Participants\";\n\n\n   constructor(public navCtrl        : NavController,\n               public params         : NavParams,\n               private _FB \t         : FormBuilder,\n               private _DB           : DatabaseProvider,\n               private _ALERT        : AlertController)\n   {\n\n      // Use Formbuilder API to create a FormGroup object\n      // that will be used to programmatically control the\n      // form / form fields in the component template\n      this.form \t\t= _FB.group({\n         'name' \t\t        : ['', Validators.required],\n         'email' \t        : ['', Validators.required],\n         'phone'\t        : ['', Validators.required],\n         'owner' \t        : ['', Validators.required],\n         'sleep_end' \t        : ['', Validators.required],\n         'sleep_start' \t        : ['', Validators.required],\n         'study' \t        : ['', Validators.required]\n      });\n\n\n      // If we have navigation parameters then we need to\n      // parse these as we know these will be used for\n      // editing an existing record\n      if(params.get('isEdited'))\n      {\n          let record \t\t        = params.get('record');\n\n          this.name\t            = record.location.name;\n          this.email   \t  = record.location.email;\n          this.phone      = record.location.phone;\n          this.owner      = record.location.owner;\n          this.sleep_end  = record.location.sleep_end;\n          this.sleep_start = record.location.sleep_start;\n          this.study      = record.location.study;\n          this.docID            = record.location.id;\n          this.isEditable       = true;\n          this.title            = 'Update this participant';\n      }\n   }\n\n\n\n   /**\n    * Saves form data as newly added/edited record within Firebase Realtime\n    * database and handles uploading of media asset to Firebase Storage\n    *\n    * @public\n    * @method saveDocument\n    * @param  val          {any}              Form data\n    * @return {none}\n    */\n   saveDocument(val : any) : void\n   {\n      let name\t      : string\t\t= this.form.controls[\"name\"].value,\n\t \t      email        : string \t\t= this.form.controls[\"email\"].value,\n  \t\t    phone       : string\t\t= this.form.controls[\"phone\"].value,\n          owner        : string \t\t= this.form.controls[\"owner\"].value,\n          sleep_end        : string \t\t= this.form.controls[\"sleep_end\"].value,\n          sleep_start        : string \t\t= this.form.controls[\"sleep_start\"].value,\n          study        : string \t\t= this.form.controls[\"study\"].value;\n\n\n\n      // If we are editing an existing record then handle this scenario\n      if(this.isEditable)\n      {\n\n         // Call the DatabaseProvider service and pass/format the data for use\n         // with the updateDocument method\n         this._DB.updateDocument(this._COLL,\n                               this.docID,\n                               {\n\t                               name    : name,\n\t                               email    : email,\n\t                               phone   : phone,\n                                 owner  : owner,\n                                 sleep_end : sleep_end,\n                                 sleep_start : sleep_start,\n                                 study    : study\n\t                           })\n         .then((data) =>\n         {\n            this.clearForm();\n            this.displayAlert('Success', 'The participant ' +  name + ' was successfully updated');\n         })\n         .catch((error) =>\n         {\n            this.displayAlert('Updating participant failed', error.message);\n         });\n      }\n\n      // Otherwise we are adding a new record\n      else\n      {\n\n         // Call the DatabaseProvider service and pass/format the data for use\n         // with the addDocument method\n         this._DB.addDocument(this._COLL,\n                            {\n\t                           name    : name,\n\t                           email    : email,\n\t                           phone   : phone,\n                             owner  : owner,\n                             sleep_end : sleep_end,\n                             sleep_start : sleep_start,\n                             study  : study\n\t                        })\n         .then((data) =>\n         {\n            this.clearForm();\n            this.displayAlert('Record added', 'The participant ' +  name + ' was successfully added');\n         })\n         .catch((error) =>\n         {\n            this.displayAlert('Adding participant failed', error.message);\n         });\n      }\n   }\n\n\n\n   /**\n    * Provide feedback to user after an operation has succeeded/failed\n    *\n    * @public\n    * @method displayAlert\n    * @param  title          {String}           Heading for alert message\n    * @param  message        {String}           Content for alert message\n    * @return {none}\n    */\n   displayAlert(title      : string,\n                message    : string) : void\n   {\n      let alert : any     = this._ALERT.create({\n         title      : title,\n         subTitle   : message,\n         buttons    : ['Got it!']\n      });\n      alert.present();\n   }\n\n\n\n   /**\n    * Clear all form data\n    *\n    * @public\n    * @method clearForm\n    * @return {none}\n    */\n   clearForm() : void\n   {\n      this.name  \t\t\t\t\t= '';\n      this.email\t\t\t\t= '';\n      this.phone \t\t\t\t= '';\n      this.owner \t\t\t\t= '';\n      this.sleep_end \t\t\t\t= '';\n      this.sleep_start \t\t\t\t= '';\n      this.study \t\t\t\t= '';\n\n   }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/create_participant/create_participant.ts"],"sourceRoot":""}