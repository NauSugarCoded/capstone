{"version":3,"sources":["../../src/pages/select_study/select_study.module.ts","../../src/pages/select_study/select_study.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SelectStudyPage } from './select_study';\n\n@NgModule({\n  declarations: [\n    SelectStudyPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SelectStudyPage),\n  ],\n})\nexport class SelectStudyPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/select_study/select_study.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormsModule } from '@angular/forms';\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { ModulesPage } from \"../modules/modules\"\nimport { DatabaseProvider } from '../../providers/database/database';\n\n/**\n * Generated class for the SelectStudyPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n @IonicPage({\n \tname: \"select_study\"\n })\n@Component({\n  selector: 'page-select-study',\n  templateUrl: 'select_study.html',\n})\nexport class SelectStudyPage {\n\n  /**\n   * @name form\n   * @type {object}\n   * @public\n   * @description     Defines an object for handling form validation\n   */\n  public form          : any;\n\n\n\n  /**\n   * @name records\n   * @type {object}\n   * @public\n   * @description     Defines an object for returning documents from Cloud Firestore database\n   */\n  public records       : any;\n\n\n\n  /**\n   * @name full_name\n   * @type {string}\n   * @public\n   * @description     Model for city form field\n   */\n  public full_name          : string          = '';\n\n\n\n  /**\n   * @name short_name\n   * @type {string}\n   * @public\n   * @description     Model for population form field\n   */\n  public short_name    : string          = '';\n\n\n\n  /**\n   * @name abstract\n   * @type {string}\n   * @public\n   * @description     Model for established form field\n   */\n  public abstract \t: string          = '';\n\n  /**\n   * @name start_date\n   * @type {date}\n   * @public\n   * @description     Model for established form field\n   */\n  public start_date \t: string           ='';\n\n  /**\n   * @name end_date\n   * @type {date}\n   * @public\n   * @description     Model for established form field\n   */\n  public end_date \t: string           ='';\n\n\n\n  /**\n   * @name docID\n   * @type {string}\n   * @public\n   * @description     property that stores an edited document's ID\n   */\n  public docID         : string          = '81XU1moWva6onAtMHpYY';\n\n\n\n  /**\n   * @name isEditable\n   * @type {boolean}\n   * @public\n   * @description     property that stores value to signify whether\n                      we are editing an existing document or not\n   */\n  public isEditable    : boolean         = false;\n\n\n\n  /**\n   * @name title\n   * @type {string}\n   * @public\n   * @description     property that defines the template title value\n   */\n  public title \t\t: string\t\t   = 'Add a new Study';\n\n\n\n  /**\n   * @name _COLL\n   * @type {string}\n   * @private\n   * @description     property that stores the value for the database collection\n   */\n  private _COLL \t\t: string \t\t\t= \"Studies\";\n\n  /**\n   * @name modules\n   * @type {any}\n   * @public\n   * @description      Property to store the returned documents from the database collection\n   */\n  public modules     : any;\n\n  /**\n   * @name locations\n   * @type {any}\n   * @public\n   * @description      Property to store the returned documents from the database collection\n   */\n  public locations     : any;\n\n\n  /**\n   * @name mods\n   * @type {any}\n   * @public\n   * @description      Property to store the returned documents from the database collection\n   */\n  public mods     : any;\n\n\n\n  constructor(public navCtrl        : NavController,\n              public params         : NavParams,\n              private _FB \t         : FormBuilder,\n              private _DB           : DatabaseProvider,\n              private _ALERT        : AlertController)\n  {\n\n     // Use Formbuilder API to create a FormGroup object\n     // that will be used to programmatically control the\n     // form / form fields in the component template\n     this.form \t\t= _FB.group({\n        'full_name' \t\t        : ['', Validators.required],\n        'short_name' \t        : ['', Validators.required],\n        'abstract'\t            : ['', Validators.required],\n        'start_date'\t            : ['', Validators.required],\n        'end_date'\t            : ['', Validators.required],\n        'modules'               : ['']\n     });\n\n\n     // If we have navigation parameters then we need to\n     // parse these as we know these will be used for\n     // editing an existing record\n     if(params.get('isEdited'))\n     {\n         let record \t\t        = params.get('record');\n\n         this.full_name\t            = record.location.full_name;\n         this.short_name   \t  = record.location.short_name;\n         this.abstract      = record.location.abstract;\n         this.start_date      = record.location.start_date;\n         this.end_date      = record.location.end_date;\n         this.docID            = record.location.id;\n         this.isEditable       = true;\n         this.title            = 'Update this document';\n     }\n  }\n\n  /**\n   * Retrieve all documents from the specified collection using the\n   * retrieveCollection method when the view is entered\n   *\n   * @public\n   * @method ionViewDidEnter\n   * @return {none}\n   */\n  ionViewDidEnter()\n  {\n    this.retrieveCollection();\n    this.retrieveSubCollection();\n    this.retrieveModules();\n  }\n\n  retrieveCollection() : void\n  {\n     this._DB.getStudies(this._COLL)\n     .then((data) =>\n     {\n       this.locations = data;\n\n     })\n     .catch();\n  }\n\n  /**\n   * Retrieve all documents from the specified collection using the\n   * getDocuments method of the DatabaseProvider service\n   *\n   * @public\n   * @method retrieveCollection\n   * @return {none}\n   */\n  retrieveSubCollection() : void\n  {\n     this._DB.getStudies_Modules(this._COLL, this.docID, \"modules\")\n     .then((data) =>\n     {\n       this.modules = data;\n     })\n     .catch();\n  }\n\n  retrieveModules() : void\n  {\n    this._DB.getModules(\"Modules\")\n    .then((data) =>\n    {\n      this.mods = data;\n    })\n    .catch();\n  }\n\n  updateStudy(obj)  : void\n  {\n     let full_name\t      : string\t\t= this.form.controls[\"full_name\"].value,\n         short_name        : string \t\t= this.form.controls[\"short_name\"].value,\n         abstract       : string\t\t= this.form.controls[\"abstract\"].value,\n         start_date       : string\t\t= this.form.controls[\"start_date\"].value,\n         end_date       : string\t\t= this.form.controls[\"end_date\"].value;\n\n     // If we are editing an existing record then handle this scenario\n     if(this.isEditable)\n     {\n\n        // Call the DatabaseProvider service and pass/format the data for use\n        // with the updateDocument method\n        this._DB.updateDocument(this._COLL,\n                              this.docID,\n                              {\n                                full_name    : full_name,\n                                short_name    : short_name,\n                                abstract   : abstract,\n                                start_date\t: start_date,\n                                end_date   : end_date\n                            })\n        .then((data) =>\n        {\n           this.displayAlert('Success', 'The study ' +  short_name + ' was successfully updated');\n        })\n        .catch((error) =>\n        {\n           this.displayAlert('Updating study failed', error.message);\n        });\n     }\n\n     // Otherwise we are adding a new record\n     else\n     {\n\n        // Call the DatabaseProvider service and pass/format the data for use\n        // with the addDocument method\n        this._DB.addDocument(this._COLL,\n                           {\n                            full_name    : full_name,\n                            short_name    : short_name,\n                            abstract   : abstract,\n                            start_date\t: start_date,\n                            end_date   : end_date\n                         })\n        .then((data) =>\n        {\n           this.displayAlert('Record added', 'The study ' +  short_name + ' was successfully added');\n        })\n        .catch((error) =>\n        {\n           this.displayAlert('Adding study failed', error.message);\n        });\n     }\n  }\n\n   saveDocument(val : any)\n   {\n     this._DB.addStudies_Modules(this._COLL, this.docID, \"modules\", val)\n     .then((data : any) =>\n     {\n       this.displayAlert('Success', 'The module ' + val.name + ' was successfully added');\n     })\n     .catch((error : any) =>\n     {\n       this.displayAlert('Error', error.message);\n     });\n   }\n\n   viewDocument(obj) : void\n   {\n      let params : any = {\n         collection   : \"modules\",\n         module     : obj\n      };\n      this.navCtrl.push('select_module', { record : params, isEdited : true });\n   }\n\n   deleteDocument() : void\n   {\n      this._DB.deleteDocument(this._COLL,\n                 this.docID)\n      .then((data : any) =>\n      {\n         this.displayAlert('Success', 'The study ' + this.short_name + ' was successfully removed');\n      })\n      .catch((error : any) =>\n      {\n         this.displayAlert('Error', error.message);\n      });\n   }\n\n  /**\n   * Provide feedback to user after an operation has succeeded/failed\n   *\n   * @public\n   * @method displayAlert\n   * @param  title          {String}           Heading for alert message\n   * @param  message        {String}           Content for alert message\n   * @return {none}\n   */\n  displayAlert(title      : string,\n               message    : string) : void\n  {\n     let alert : any     = this._ALERT.create({\n        title      : title,\n        subTitle   : message,\n        buttons    : ['Got it!']\n     });\n     alert.present();\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/select_study/select_study.ts"],"sourceRoot":""}