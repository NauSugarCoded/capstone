{"version":3,"sources":["../../src/pages/create_question/create_question.module.ts","../../src/pages/create_question/create_question.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { CreateQuestionPage } from './create_question';\n\n@NgModule({\n  declarations: [\n    CreateQuestionPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(CreateQuestionPage),\n  ],\n})\nexport class CreateQuestionPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/create_question/create_question.module.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { DatabaseProvider } from '../../providers/database/database';\n\n\n@IonicPage({\n\tname: \"create_question\"\n})\n@Component({\n  selector: 'page-create-question',\n  templateUrl: 'create_question.html',\n})\n\nexport class storage {\n\tqtypes = [\n\t\t{name: 'Text'},\n\t\t{name: 'Radio'},\n\t\t{name: 'Multiple Choice'},\n\t\t{name: 'Slider'}\n\t];\n}\n\nexport class CreateQuestionPage {\n\n\n\n   /**\n    * @name form\n    * @type {object}\n    * @public\n    * @description     Defines an object for handling form validation\n    */\n   public form          : any;\n\n\n\n   /**\n    * @name records\n    * @type {object}\n    * @public\n    * @description     Defines an object for returning documents from Cloud Firestore database\n    */\n   public records       : any;\n\n\n\n   /**\n    * @name name\n    * @type {string}\n    * @public\n    * @description     Model for city form field\n    */\n   public name          : string          = '';\n\n\n\n   /**\n    * @name type\n    * @type {string}\n    * @public\n    * @description     Model for population form field\n    */\n   public type    : string          = '';\n\n\n\n   /**\n    * @name qtext\n    * @type {string}\n    * @public\n    * @description     Model for established form field\n    */\n   public qtext \t: string          = '';\n\n\n\n   /**\n    * @name docID\n    * @type {string}\n    * @public\n    * @description     property that stores an edited document's ID\n    */\n   public docID         : string          = '';\n\n\n\n   /**\n    * @name isEditable\n    * @type {boolean}\n    * @public\n    * @description     property that stores value to signify whether\n                       we are editing an existing document or not\n    */\n   public isEditable    : boolean         = false;\n\n\n\n   /**\n    * @name title\n    * @type {string}\n    * @public\n    * @description     property that defines the template title value\n    */\n   public title \t\t: string\t\t   = 'Add a new question';\n\n\n\n   /**\n    * @name _COLL\n    * @type {string}\n    * @private\n    * @description     property that stores the value for the database collection\n    */\n   private _COLL \t\t: string \t\t\t= \"Questions\";\n\n\n   constructor(public navCtrl        : NavController,\n               public params         : NavParams,\n               private _FB \t         : FormBuilder,\n               private _DB           : DatabaseProvider,\n               private _ALERT        : AlertController)\n   {\n\n      // Use Formbuilder API to create a FormGroup object\n      // that will be used to programmatically control the\n      // form / form fields in the component template\n      this.form \t\t= _FB.group({\n         'name' \t\t        : ['', Validators.required],\n         'type' \t        : ['', Validators.required],\n         'qtext'\t        : ['', Validators.required]\n      });\n\n\n      // If we have navigation parameters then we need to\n      // parse these as we know these will be used for\n      // editing an existing record\n      if(params.get('isEdited'))\n      {\n          let record \t\t        = params.get('record');\n\n          this.name\t            = record.location.name;\n          this.type   \t  = record.location.type;\n          this.qtext      = record.location.qtext;\n          this.docID            = record.location.id;\n          this.isEditable       = true;\n          this.title            = 'Update this document';\n      }\n   }\n\n\n\n   /**\n    * Saves form data as newly added/edited record within Firebase Realtime\n    * database and handles uploading of media asset to Firebase Storage\n    *\n    * @public\n    * @method saveDocument\n    * @param  val          {any}              Form data\n    * @return {none}\n    */\n   saveDocument(val : any) : void\n   {\n      let name\t      : string\t\t= this.form.controls[\"name\"].value,\n\t \t      type        : string \t\t= this.form.controls[\"type\"].value,\n  \t\t    qtext       : string\t\t= this.form.controls[\"qtext\"].value;\n\n\n      // If we are editing an existing record then handle this scenario\n      if(this.isEditable)\n      {\n\n         // Call the DatabaseProvider service and pass/format the data for use\n         // with the updateDocument method\n         this._DB.updateDocument(this._COLL,\n                               this.docID,\n                               {\n\t                               name    : name,\n\t                               type    : type,\n\t                               qtext   : qtext\n\t                           })\n         .then((data) =>\n         {\n            this.clearForm();\n            this.displayAlert('Success', 'The question ' +  name + ' was successfully updated');\n         })\n         .catch((error) =>\n         {\n            this.displayAlert('Updating question failed', error.message);\n         });\n      }\n\n      // Otherwise we are adding a new record\n      else\n      {\n\n         // Call the DatabaseProvider service and pass/format the data for use\n         // with the addDocument method\n         this._DB.addDocument(this._COLL,\n                            {\n\t                           name    : name,\n\t                           type    : type,\n\t                           qtext   : qtext\n\t                        })\n         .then((data) =>\n         {\n            this.clearForm();\n            this.displayAlert('Record added', 'The question ' +  name + ' was successfully added');\n         })\n         .catch((error) =>\n         {\n            this.displayAlert('Adding question failed', error.message);\n         });\n      }\n   }\n\n\n\n   /**\n    * Provide feedback to user after an operation has succeeded/failed\n    *\n    * @public\n    * @method displayAlert\n    * @param  title          {String}           Heading for alert message\n    * @param  message        {String}           Content for alert message\n    * @return {none}\n    */\n   displayAlert(title      : string,\n                message    : string) : void\n   {\n      let alert : any     = this._ALERT.create({\n         title      : title,\n         subTitle   : message,\n         buttons    : ['Got it!']\n      });\n      alert.present();\n   }\n\n\n\n   /**\n    * Clear all form data\n    *\n    * @public\n    * @method clearForm\n    * @return {none}\n    */\n   clearForm() : void\n   {\n      this.name  \t\t\t\t\t= '';\n      this.type\t\t\t\t= '';\n      this.qtext \t\t\t\t= '';\n   }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/create_question/create_question.ts"],"sourceRoot":""}